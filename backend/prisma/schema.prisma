// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  username String @unique @db.VarChar(80)
  email String @unique @db.VarChar(255)
  password String @db.VarChar(60)

  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  posts Post[]
  comments Comment[]

  @@map("users")
}

model Post {
  id String @default(uuid()) @id
  title String @db.VarChar(255)
  description String @db.LongText
  userId Int

  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]

  @@map("posts")  
}

model Comment {
  id String @default(uuid()) @id
  text String @db.VarChar(500)
  postId String
  userId Int

  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}
